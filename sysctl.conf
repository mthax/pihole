#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#
# The default coredump filename is “core”. By setting core_uses_pid to 1, the coredump filename becomes core.PID. If core_pattern does not include “%p” (default does not) and 
# core_uses_pid is set, then .PID will be appended to the filename.
#
# Run ifconfig ethX txqueuelen 10000 
#
kernel.core_uses_pid = 1
#
# Avoid kernel memory address exposures via dmesg.
#
kernel.dmesg_restrict = 1
#
# Setting Hostname & Domain
#
kernel.domainname = thallinger.lan
kernel.hostname = dns.thallinger.lan
#
# ExecShield is security Linux kernel patch to avoid worms and other problems
#
kernel.exec-shield = 1
#
# Hide exposed kernel pointers
#
kernel.kptr_restrict = 1
#
# Allow for more PIDs
#
kernel.pid_max = 65535
#
# The contents of /proc/<pid>/maps and smaps files are only visible to readers that are allowed to ptrace() the process
#
kernel.maps_protect = 1
#
# Stop Kernel Spam
#
kernel.printk = 3 4 1 3
#
# Address Space Layout Randomization (ASLR) can help defeat certain types of buffer overflow attacks.
#
kernel.randomize_va_space = 2
#
# I disable kernel.sysrq on a System with no Keyboard attached
#
kernel.sysrq = 0
#
# 8192 for every 128MB RAM. So for Raspberry Pi 4 2GB 128x16
#
fs.file-max = 131072
#
# Disable to avoid leaking sensitive Data
#
# Turn on hard- and symlink protection
#
fs.protected_symlinks = 1
fs.protected_hardlinks = 1
#
fs.suid_dumpable = 0
#
# fq in this case, fq_codel for Router or Forwarding Traffic cause of Bottlenecking
#
net.core.default_qdisc = fq
#
# The maximum number of packets that kernel can handle on a NAPI interrupt, it’s a Per-CPU variable. For drivers that support LRO or GRO_HW, a hardware aggregated packet is counted 
# as one packet in this context.
#
net.core.dev_weight = 128
#
# The received frames will be stored in this queue after taking them from the ring buffer on the network card. 
# Increasing this value for high speed cards may help prevent losing packets.
#
net.core.netdev_max_backlog = 250000
net.core.netdev_budget = 60000
net.core.netdev_budget_usecs = 6000
#
# Default Linux Networt Stack Values
#
net.core.optmem_max = 16777216
#
# Default Linux Networt Stack Values
#
net.core.rmem_default = 16777216
#
# Default Linux Networt Stack Values
#
net.core.rmem_max = 16777216
#
# The upper limit on how many connections the kernel will accept
#
net.core.somaxconn = 4096
#
# Default Linux Networt Stack Values
#
net.core.wmem_default = 16777216
#
# Default Linux Networt Stack Values
#
net.core.wmem_max = 16777216
#
# By enabling reverse path filtering, the kernel will do source validation of the packets received from all the interfaces on the machine. This can protect from attackers that are 
# using IP spoofing methods to do harm.
#
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.lo.rp_filter = 1
net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.default.arp_filter = 1
#
# A martian packet is an IP packet which specifies a source or destination address that is reserved for special-use by Internet Assigned Numbers Authority (IANA). See Reserved IP 
# addresses for more details. Often martian and unroutable packet may be used for a dangerous purpose.
#
net.ipv4.conf.default.log_martians = 0
net.ipv4.conf.all.log_martians = 0
#
# Enable Traffic - Forwarding
#
net.ipv4.ip_forward = 1
net.ipv4.conf.all.forwarding = 1
net.ipv4.conf.default.forwarding = 1
net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.default.forwarding = 1
#
# Disable ICMP redirect acceptance
# I only send redirects if its a Router
#
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.secure_redirects = 1
net.ipv6.conf.default.secure_redirects = 1
net.ipv6.conf.all.send_redirects = 0
net.ipv6.conf.default.send_redirects = 0
net.ipv6.conf.all.accept_source_route = 0
#
# Allow Pings
#
net.ipv4.icmp_echo_ignore_all = 0
net.ipv6.icmp.echo_ignore_all = 0
#
# Fix Arp Problems
#
net.ipv4.conf.default.arp_announce = 2
net.ipv4.conf.default.arp_notify = 1
net.ipv4.conf.default.arp_ignore=1
#
# Prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages.
#
net.ipv4.icmp_ignore_bogus_error-responses = 1
#
# The ipfrag_high_thresh tells the kernel the maximum amount of memory to use to reassemble IP fragments. When and if the high threshold is reached, the fragment handler will 
# toss all packets until the memory usage reaches ipfrag_low_thresh. This means that all fragments that reached us during this time will have to be retransmitted.
#
net.ipv4.ipfrag_high_thresh = 4194303
net.ipv4.ipfrag_low_thresh = 1048575
cnet.ipv4.ipfrag_time = 15
#
# Increasing the Amount of unprivileged Ports allowed to Communicate 
#
net.ipv4.ip_local_port_range = 1024 65535
#
# Some Neighbour Discovery related Settings
#
net.ipv4.neigh.default.gc_interval = 120
net.ipv4.neigh.default.gc_stale_time = 240
net.ipv6.neigh.default.gc_thresh1 = 256
net.ipv6.neigh.default.gc_thresh2 = 1024
net.ipv6.neigh.default.gc_thresh3 = 2048
net.ipv4.neigh.default.gc_thresh1 = 256
net.ipv4.neigh.default.gc_thresh2 = 1024
net.ipv4.neigh.default.gc_thresh3 = 2048
#
# A boolean flag controlling the behaviour under lots of incoming connections. When enabled, this causes the kernel to actively send RST packets when a service is overloaded.
# When this parameter is set to 1, if the system receives a large number of requests within a short period of time but fails to process them, the system will send reset packets 
# to terminate the connections. It is recommended that you improve system processing capabilities by optimizing the application efficiency but not simply performing reset 
# operations.
#
net.ipv4.tcp_abort_on_overflow = 0
#
# The following variable is used to tell the kernel how much of the socket buffer space should be used for TCP window size, and how much to save for an application buffer. A 
# value of 1 means the socket buffer will be divided evenly between. TCP windows size and application.
#
net.ipv4.tcp_adv_win_scale = 1
#
# Enables binary increase congestion for fast long-distance networks so that the connections with operations being performed at a rate of Gbit/s can be functional. You are suggested 
# to enable binary increase congestion for WAN communication.
## Set to 1 for Public Servers, set to 0 for Private Servers
#
net.ipv4.tcp_bic = 0
#
# The BBR congestion control algorithm can help achieve higher bandwidths and lower latencies for internet traffic.
#
net.ipv4.tcp_congestion_control = bbr
#
# ECN is used only when both ends of the TCP connection indicate support for it. This feature is useful in avoiding losses due to congestion by allowing supporting routers to 
# signal congestion before having to drop packets. Possible values are: 0 Disable ECN. Neither initiate nor accept ECN. 1 Enable ECN when requested by incoming connections and 
# also request ECN on outgoing connection attempts. 2 Enable ECN when requested by incoming connections but do not request ECN on outgoing connections
#
net.ipv4.tcp_ecn = 1
net.ipv4.tcp_ecn_fallback = 2
#
# TCP Fast Open is an extension to the transmission control protocol (TCP) that helps reduce network latency by enabling data to be exchanged during the sender’s initial TCP SYN 
#
net.ipv4.tcp_fastopen = 3
#
# Determines the time that must elapse before TCP/IP can release a closed connection and reuse its resources. This interval between closure and release is known as the TIME_WAIT 
# state or twice the maximum segment lifetime (2MSL) state. During this time, reopening the connection to the client and server cost less than establishing a new connection. 
# By reducing the value of this entry, TCP/IP can release closed connections faster, providing more resources for new connections. Adjust this parameter if the running application 
# requires rapid release, the creation of new connections, and a low throughput due to many connections sitting in the TIME_WAIT state.
#
net.ipv4.tcp_fin_timeout = 10 
#
# If set, incoming connections to listening sockets that do not have a socket mark will set the mark of the accepting socket to the fwmark of the incoming SYN packet.
# This will cause all packets on that connection (starting from the first SYNACK) to be sent with that fwmark. The listening socket's mark is unchanged. Listening sockets 
# that already have a fwmark set via setsockopt(SOL_SOCKET, SO_MARK, ...) are unaffected.
#
net.ipv4.tcp_fwmark_accept = 1
#
# Enable  F-RTO,  an enhanced recovery algorithm for TCP retransmission timeouts (RTOs). It is particularly beneficial in  wireless  environments  where  packet  loss is typically 
# due to random radio interference rather than intermediate router  congestion.  See RFC 4138 for more details. 
## Set TCP_FRTO & TCP_FRTO_RESPONSE to 0 on Public Servers // 2 on Private Networks
#
net.ipv4.tcp_frto = 2
net.ipv4.tcp_frto_response = 2
#
# If  enabled,  the  TCP  stack makes decisions that prefer lower latency as opposed to higher throughput. It  this  option  is disabled,  then  higher throughput is preferred.  
# An example of an application where this default should be changed would be a Beowulf compute cluster.
## SET TCP_LOW_LATENCY to 0 on Public Servers / MediaServers / Fileservers or on Servers where Througput is important like Routers or VPN
#
net.ipv4.tcp_low_latency = 1
#
# TCP keepalive is a mechanism for TCP connections that help to determine whether the other end has stopped responding or not. TCP will send the keepalive probe that contains null 
# data to the network peer several times after a period of idle time. If the peer does not respond, the socket will be closed automatically.
# https://cwiki.apache.org/confluence/display/GEODE/Network+Configuration+Best+Practices
#
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_max_orphans = 16384
#
# tcp_max_syn_backlog is the maximum queue length of pending connections 'Waiting Acknowledgment'. In the event of a synflood DOS attack, this queue can fill up pretty quickly, 
# at which point TCP SYN cookies will kick in allowing your system to continue to respond to legitimate traffic, and allowing you to gain access to block malicious IPs.
#
net.ipv4.tcp_max_syn_backlog = 30000
#
# tcp_max_tw_buckets is the maximum number of sockets in TIME_WAIT state. After reaching this number the system will start destroying the socket that are in this state.
# Increase this to prevent simple DOS attacks
#
net.ipv4.tcp_max_tw_buckets = 2000000
net.ipv4.tcp_moderate_rcvbuf = 1
#
# The longer the maximum transmission unit (MTU) the better for performance, but the worse for reliability. This is because a lost packet means more data to be retransmitted and 
# because many routers on the Internet cannot deliver very long packets
#
net.ipv4.tcp_mtu_probing = 1
#
# By default, TCP saves various connection metrics in the route cache when the connection closes, so that connections established in the near future can use these to set 
# initial conditions. Usually, this increases overall performance, but may sometimes cause performance degradation. If set, TCP will not cache metrics on closing connections.
#
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_orphan_retries = 0
net.ipv4.tcp_reordering = 3
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3
#
# Protect against tcp time-wait assassination hazards, drop RST packets for sockets in the time-wait state. Not widely supported outside of Linux, but conforms to RFC
#
net.ipv4.tcp_rfc1337 = 1
#
# Default Linux Networt Stack Values
# https://cwiki.apache.org/confluence/display/GEODE/Network+Configuration+Best+Practices
#
net.ipv4.tcp_rmem = 4096 87380 16777216
#
# Disable SACK as it is commonly exploited and likely not needed.
# https://forums.whonix.org/t/disabling-tcp-sack-dsack-fack/8109
## Since we trust our private Networks we set it to 1 it since TCP_FRTO needs it. On Public Networks we disable it cause of Security.
#
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_fack = 1
#
# tcp_slow_start_after_idle sets whether TCP should start at the default window size only for new connections or also for existing connections that have been idle for too long.
# This setting kills persistent single connection performance and could be turned off
#
net.ipv4.tcp_slow_start_after_idle = 0
#
# Helps protect against SYN flood attacks.
# Whe disable it cause it can impact the Network Performance very badly. To still attempt to mitigate SYN Floods we set net.ipv4.tcp_max_syn_backlog="16384"  
# net.ipv4.tcp_synack_retries="1" net.ipv4.tcp_max_orphans="400000" 
# 
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_synack_retries = 1
#
# TCP timestamps protect against wrapping sequence numbers (at gigabit speeds) and round trip time calculation implemented in TCP. It is not recommended to turn off TCP timestamps 
# as it may cause a security risk. Disabling timestamp generation will reduce spikes and may give a performance boost on gigabit networks. It helps with Autotuning and with TCP_SACK
#
net.ipv4.tcp_timestamps = 1
#
# Enabling this option is not recommended since this causes problems when working with NAT (Network Address Translation).
#
net.ipv4.tcp_tw_recycle = 0
#
# tcp_tw_reuse sets whether TCP should reuse an existing connection in the TIME-WAIT state for a new outgoing connection if the new timestamp is strictly bigger than the most 
# recent timestamp recorded for the previous connection. This helps avoid from running out of available network sockets
#
net.ipv4.tcp_tw_reuse = 1
#
# Enables the congestion control algorithm on the transmitter end to evaluate throughput and improve the overall bandwidth utilization. You are suggested to enable the congestion 
# control algorithm for WAN communication.
## Set to 1 on Public Servers, set to 0 on Private Servers
#
net.ipv4.tcp_westwood = 0
#
# The TCP window scale option is an option to increase the receive window size allowed in Transmission Control Protocol above its former maximum value of 65,535 bytes. 
# This TCP option, along with several others, is defined in IETF RFC 1323 which deals with long fat networks (LFNs).
#
net.ipv4.tcp_window_scaling = 1
#
# If enabled, assume that no receipt of a window-scaling option means that the
# remote TCP is broken and treats the window as a signed quantity.  If
# disabled, assume that the remote TCP is not broken even if we do not receive
# a window scaling option from it.
#
net.ipv4.tcp_workaround_signed_windows = 1
#
# Default Linux Networt Stack Values
# https://cwiki.apache.org/confluence/display/GEODE/Network+Configuration+Best+Practices
# 
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_mem = 1638400 1638400 1638400
#
# Increase UDP Limits
#
net.ipv4.udp_rmem_min = 8192
#
# Increase UDP Limits
#
net.ipv4.udp_wmem_min = 8192
#
# Netfliter has got a set limit of connections it can handle. These connections also have set long-term timeouts. On rapid connection open-close or open-drop, netfilter can run out 
# of connection limits in it’s conntrack table.
#
net.netfilter.nf_conntrack_max = 524288
net.nf_conntrack_max = 524288
#
# For datagram-oriented Unix Domain Socket, setting the SO_SNDBUF socket option has an effect, but the SO_RCVBUF option does not (manpage unix(7)). And even the buffer is big enough,
# we can still experience the packet overflow problem. That is because there is another limitation in the datagram type Unix Domain Socket. The backlog of the packets in the buffer is 
# not unlimited. For example, the default value of the maximum backlog in most Linux systems is set to 10, i.e. only 10 packets can wait in the queue. 
#
net.unix.max_dgram_qlen = 128
#
# MemorySettings
#
# vm.dirty_background_ratio is the percentage of system memory that can be filled with “dirty” pages — memory pages that still need to be written to disk — before the 
# pdflush/flush/kdmflush background processes kick in to write it to disk. 
#
vm.dirty_background_ratio = 5
#
# Is the absolute maximum amount of system memory that can be filled with dirty pages before everything must get committed to disk. When the system gets to this point all new 
# I/O blocks until dirty pages have been written to disk. This is often the source of long I/O pauses, but is a safeguard against too much data being cached unsafely in memory.
#
vm.dirty_ratio = 80
#
## On little Systems like Pi's vm.dirty_background_ratio = 5 vm.dirty_ratio = 80 makes sense. On VPS / Virtualised System set it to vm.dirty_background_ratio = 5 vm.dirty_ratio = 10
## On Systems where Dataloss isnt Critial or with multiple writes to the same files set f.e. vm.dirty_background_ratio = 5 vm.dirty_ratio = 10
#
# This option controls the tendency of the kernel to reclaim the memory which is used for caching of directory and inode objects.
#
vm.vfs_cache_pressure = 50
#
# Swap only with 1% RAM left, cause we dont want to write too much on the SDCARD
## Set it to 5% on Small devices, 10% on everything else. Why try to keep writes to the SDCARD as low as possible, so why try to not use swap till we have to. 5 % Is set to avoid
## OOM Errors in case something needs much memory fast. 
#
vm.swappiness = 5
# 
# This will ensure that immediatly subsequent connections use the new values
#
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1




