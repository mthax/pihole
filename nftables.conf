#!/usr/sbin/nft -f

flush ruleset

# Placeholders for future use

# define VPN = "wg0"
# define VPN_NET = "x.x.x.x/24"
# define WAN = "x.x.x.x/24"
# define NIC_NAME = "eth0"
# define NIC_MAC = ""
# define NIC_IP = "10.1.2.6"
# define LOCAL_NET = "10.1.2.0/24"
# define LOCAL_NET_IPV6 = "fe80::/10"
# define DNS_SERVER = "10.1.2.6"
# define UPSTREAM_DNS_SERVER = "1.1.1.2"
# define NTP_SERVER = "time.cloudflare.com"
# define DHCP_SERVER = "10.1.2.1"


table netdev filter {

	chain ingress {

		# Clear Malformed Traffic even before it gets to Prerouting

		type filter hook ingress device eth0 priority -500;

		# Filter IP Fragments
		ip frag-off & 0x1fff != 0 counter drop
		
		# IP BOGONS From <https://www.team-cymru.com/bogon-reference.html>.
		# I dont want to accept Traffic out of ranges i dont use 
		ip saddr { 100.64.0.0/10, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24 } counter drop

		# TCP MSS
		# Clear Malformed TCP Traffic
		tcp flags syn tcp option maxseg size 1-536 counter drop
  		
		# Drop senseless TCP Flag Combinations // Nftables may filter it in code allready, but since Documentation is rare, i take the secure Path
		tcp flags & (fin|syn) == (fin|syn) counter drop
		tcp flags & (fin|rst) == fin|rst counter drop
		tcp flags & (syn|rst) == (syn|rst) counter drop
		tcp flags & (psh|ack) == psh counter drop
		tcp flags & (fin|ack) == fin counter drop
		tcp flags & (ack|urg) == urg counter drop
		tcp flags & (fin|ack) == fin counter drop
		tcp flags & (fin|syn|rst|psh|ack|urg) < (fin) counter drop
		tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|psh|urg) counter drop
		tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|psh|urg counter drop
		tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg counter drop
		tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop

		# Limit RST Rate // Drop if there are too much
		tcp flags & (rst) == rst limit rate 2/second burst 2 packets counter accept
		tcp flags & (rst) == rst counter drop
		
		}

}

table inet firewall {

	set tcp_accepted {

		type inet_service; flags interval;

			# Opened Incoming TCP Ports

				elements = { ssh, 53, 80, 443, 853 }
		
	}

        set tcp_accepted_outgoing {

            type inet_service; flags interval;

			# Opened Outgoing TCP Ports

                elements = { 53, 67, 80, 443, 587, 853 }

        }


    	set udp_accepted {

		type inet_service; flags interval;

			# Opened Incoming UDP Ports

				elements = { 53, 80, 443, 853, 546, 547 }

	}

        set udp_accepted_outgoing {

                type inet_service; flags interval;

			# Opened Outgoing UDP Ports

				elements = { 53, 67, 68, 69, 80, 123, 443, 853 }
                
        }


#	IP Blocklist for special Cases, Fail2ban doesnt catch them
#
#	set blocklist_v4 {
#
#		type ipv4_addr; flags interval;
#
#		    elements = { }
#
#	}

	chain base_checks {

	# Basic Connection Checking for INPUT, Output and Forward. Drops Invalid traffic and takes care of backflowing Traffic

		# Allow established/related connection
        ct state {established, related} accept

        # Dropping Invalid Stuff which survived Ingress
        ct state invalid counter drop

	}

	chain input {

		type filter hook input priority 0; policy drop;

		# Incoming Traffic default gets dropped by default

		# Allow Traffic from Loopback
		iifname lo accept
		ip6 saddr ::1 accept

		# Jump to the Base Checs to allow established / related Traffic and drop invalid
		jump base_checks

		# Allow certain ICMP Traffic and all IGMP per default
        ip6 nexthdr icmpv6 icmpv6 type { echo-request, echo-reply, packet-too-big, time-exceeded, parameter-problem, destination-unreachable, packet-too-big, mld-listener-query, mld-listener-report, mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report } accept 
		ip protocol  icmp icmp type { echo-request, echo-reply, destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } accept
		ip protocol igmp accept

		# Rate Limit ping and drop them if there is too much
		ip protocol icmp icmp type echo-request limit rate over 1/second burst 5 packets accept
		ip protocol icmp icmp type echo-request counter drop
        ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/second burst 5 packets  accept
        ip6 nexthdr icmpv6 icmpv6 type echo-request counter drop

		# Now open Ports defined above
       	tcp dport @tcp_accepted accept
		udp dport @udp_accepted accept

		# Placeholder if there are IPs to block
#		ip saddr @blocklist_v4 counter drop

		# Ratelimit SSH
		tcp dport ssh ct state new limit rate 15/minute accept comment "Avoid brute force on SSH"

		# Not yet deployed
		# Allow WireGuard clients to access DNS and services. 
		# iifname $vpn udp dport 53 ct state new accept 
		# iifname $vpn tcp dport @tcp_accepted ct state new accept 
		# iifname $vpn udp dport @udp_accepted ct state new accept

		# Explicitly allow MDNS / Zeroconf / AVAHI
		udp dport mdns ip6 daddr ff02::fb accept comment "Accept mDNS"
		udp dport mdns ip daddr 224.0.0.251 accept comment "Accept mDNS"

		# Allow UPNP and Ratelimit it
		udp sport 1900 udp dport >= 1024 ip6 saddr { fd00::/8, fe80::/10 } meta pkttype unicast limit rate 4/second burst 20 packets accept comment "Accept UPnP IGD port mapping reply"
		udp sport 1900 udp dport >= 1024 ip saddr { 10.0.0.0/8, 192.168.0.0/16 } meta pkttype unicast limit rate 4/second burst 20 packets accept comment "Accept UPnP IGD port mapping reply"

		# Not needed on Pihole
		Accept Samba Stuff
#		udp sport netbios-ns udp dport >= 1024 meta pkttype unicast ip6 saddr { fd00::/8, fe80::/10 } accept comment "Accept Samba Workgroup browsing replies"
#		udp sport netbios-ns udp dport >= 1024 meta pkttype unicast ip saddr { 10.0.0.0/8, 192.168.0.0/16 } accept comment "Accept Samba Workgroup browsing replies"

	}

	chain forward {
	
		# Forwarded Traffic gets dropped by default

		type filter hook forward priority 0; policy drop;

		# Jump to the Base Checs to allow established / related Traffic and drop invalid
		jump base_checks

		# Allow certain ICMP Traffic and all IGMP per default
        ip6 nexthdr icmpv6 icmpv6 type { echo-request, echo-reply, packet-too-big, time-exceeded, parameter-problem, destination-unreachable, packet-too-big, mld-listener-query, mld-listener-report, mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report } accept 
		ip protocol  icmp icmp type { echo-request, echo-reply, destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } accept
		ip protocol igmp accept

		# Rate Limit ping and drop them if there is too much
		ip protocol icmp icmp type echo-request limit rate over 1/second burst 5 packets accept
		ip protocol icmp icmp type echo-request counter drop
        ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/second burst 5 packets  accept
        ip6 nexthdr icmpv6 icmpv6 type echo-request counter drop

		# Now open Ports defined above
       	tcp dport @tcp_accepted accept
		udp dport @udp_accepted accept

		# Placeholder if there are IPs to block
#		ip saddr @blocklist_v4 counter drop

	}

	chain output {

		type filter hook output priority 0; policy accept;

		# Allow Traffic fro Loopback
		oifname lo accept
		ip6 daddr ::1 accept

		# Jump to the Base Checs to allow established / related Traffic and drop invalid
		jump base_checks

		# Accept all Outgoging Traffic, since we are trustworthy
		ip protocol icmp accept
		ip6 nexthdr ipv6-icmp accept

		# Now open Outgoing Ports
		tcp sport @tcp_accepted_outgoing accept
		udp sport @udp_accepted_outgoing accept

		# Placeholder if there are IPs we dont want to speak to
#		ip daddr @blocklist_v4 counter drop

	}

}

table ip nat {

	chain prerouting {

		type nat hook prerouting priority -100;

		# Avoid DDoS Attacks
		# TCP SYN (CT NEW)
		tcp flags & (fin|syn|rst|ack) != syn ct state new counter drop

	}

	chain postrouting {

		type nat hook postrouting priority 100;

		# Used for Mascquerading and Stuff

	}

}
